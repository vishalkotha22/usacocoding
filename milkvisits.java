import java.io.*;
import java.util.*;

public class milkvisits {
	public static void main(String[] args) throws Exception{
		
		//desired
		BufferedReader br = new BufferedReader(new FileReader("milkvisits.in"));
		PrintWriter out = new PrintWriter(new FileWriter("milkvisits.out"));
		StringTokenizer st = new StringTokenizer(br.readLine());
		int n = Integer.parseInt(st.nextToken());
		int m = Integer.parseInt(st.nextToken());
		String type = br.readLine();
		TreeNode[] tree = new TreeNode[n+1];
		for(int a = 1; a <= n; a++)
			tree[a] = new TreeNode(type.charAt(a-1));
		for(int i = 0; i < n-1; i++){
			st = new StringTokenizer(br.readLine());
			int one = Integer.parseInt(st.nextToken());
			int two = Integer.parseInt(st.nextToken());
			tree[one].addChildren(two);
			tree[two].setParent(one);
		}
		for(int j = 0; j < m; j++){
			st = new StringTokenizer(br.readLine());
			int start = Integer.parseInt(st.nextToken());
			int end = Integer.parseInt(st.nextToken());
			char wanted = st.nextToken().charAt(0);
			ArrayList<Integer> startPath = new ArrayList<Integer>();
			ArrayList<Character> typesFoundE = new ArrayList<Character>();
			while(tree[start].getParent() > 0){
				startPath.add(start);
				start = tree[start].getParent();
			}
			startPath.add(start);
			while(!startPath.contains(end)){
				typesFoundE.add(tree[end].getData());
				end = tree[end].getParent();
			}
			boolean pass = false;
			for(int i = 0; i <= startPath.indexOf(end); i++)
				if(type.charAt(startPath.get(i)-1) == wanted){
					pass = true;
					break;
				}
			if(!pass)
				pass = typesFoundE.contains(wanted);
			if(pass)
				out.print(1);
			else
				out.print(0);
		}
		out.close();
	}
}
class TreeNode{
	ArrayList<Integer> children;
	char data;
	int parent;
	public TreeNode(char d){
		data = d;
		children = new ArrayList<Integer>();
		parent = -1;
	}
	public void setData(char c){
		data = c;
	}
	public char getData(){
		return data;
	}
	public int getParent(){
		return parent;
	}
	public void addChildren(int n){
		children.add(n);
	}
	public void removeChildren(TreeNode n){
		children.remove(children.indexOf(n));
	}
	public void setParent(int parent){
		this.parent = parent;
	}
	public String toString(){
		return data + " " + parent + " " + children;
	}
}
